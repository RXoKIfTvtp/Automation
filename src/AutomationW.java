import java.io.File;
import java.nio.file.Files;
import java.nio.file.NoSuchFileException;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.function.Consumer;
import java.util.regex.Pattern;

import com.microsoft.playwright.Browser;
import com.microsoft.playwright.BrowserContext;
import com.microsoft.playwright.BrowserType;
import com.microsoft.playwright.ConsoleMessage;
import com.microsoft.playwright.Keyboard.TypeOptions;
import com.microsoft.playwright.Page;
import com.microsoft.playwright.Page.WaitForSelectorOptions;
import com.microsoft.playwright.Playwright;
import com.microsoft.playwright.options.AriaRole;
import com.microsoft.playwright.options.FunctionCallback;
import com.microsoft.playwright.options.WaitForSelectorState;

public class AutomationW {
	
	public static class Bool {
		public boolean value = false;
	}
	
	// Attempts to load a String from a file
	public static String tryGet(String file) {
		try {
			return new String(Files.readAllBytes(Paths.get(file)));
		} catch (NoSuchFileException e) {
			// Swallow
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	private static void sleep(int ms) {
		try {
			Thread.sleep(ms);
		} catch (InterruptedException e1) {
			// Swallow
		}
	}
	
	public static void main(String[] args) {
		// args
		boolean headless = false;
		boolean screenshot = false;
		String username = null;
		String password = null;
		String url = null;
		String server = null;
		String useragent = null;
		ArrayList<String> script = new ArrayList<String>();
		
		// parse args
		for (int i = 0; i < args.length; i++) {
			if (args[i].equalsIgnoreCase("-h")) {
				headless = !headless;
			} else if (args[i].equalsIgnoreCase("-s")) {
				screenshot = !screenshot;
			} else if (args[i].equalsIgnoreCase("-u")) {
				username = args[++i];
			} else if (args[i].equalsIgnoreCase("-p")) {
				password = args[++i];
			} else if (args[i].equalsIgnoreCase("-w")) {
				server = args[++i];
			} else if (args[i].equalsIgnoreCase("-url")) {
				url = args[++i];
			} else if (args[i].equalsIgnoreCase("-ua")) {
				useragent = args[++i];
			} else {
				script.add(args[i]);
			}
		}
		
		// Check args
		
		boolean doExit = false;
		
		if (username == null) {
			System.out.println("Username not set with -u!");
			doExit = true;
		}
		
		if (password == null) {
			System.out.println("Password not set with -p!");
			doExit = true;
		}
		
		if (server == null) {
			System.out.println("Server not set with -w!");
			doExit = true;
		}
		
		if (url == null) {
			System.out.println("Login URL not set with -url!");
			doExit = true;
		}
		
		if (script.size() < 1) {
			System.out.println("No scripts specified to inject!");
			doExit = true;
		}
		
		if (doExit) {
			return;
		}
		
		// Create browser
		
		Browser browser = null;
		Page page = null;
		BrowserContext context = null;
		try (Playwright playwright = Playwright.create()) {
			BrowserType browserType = playwright.firefox();
			
			BrowserType.LaunchOptions browser_launch_opts = new BrowserType.LaunchOptions();
			browser_launch_opts.setIgnoreDefaultArgs(Arrays.asList("--mute-audio"));
			browser_launch_opts.setHeadless(headless);
			browser = browserType.launch(browser_launch_opts);
			
			Browser.NewContextOptions browser_opts = new Browser.NewContextOptions();
			if (useragent != null) {
				browser_opts.setUserAgent(useragent);
			}
			browser_opts.setViewportSize(1280, 640 - 32);
			context = browser.newContext(browser_opts);
			
			page = context.newPage();
			
			page.setViewportSize(1280, 640 - 32);
			
			// begin interaction
			
			System.out.println("Waiting for " + url + " to load...");
			page.navigate(url);
			
			// Wait for login form to be visible before attempting to login
			page.waitForSelector("input[name='login']");
			
			System.out.println("Logging into account...");
			// Enter username and password into fields
			page.focus("input[name='username']");
			page.keyboard().type(username, new TypeOptions().setDelay(125));
			page.focus("input[name='userpassword']");
			page.keyboard().type(password, new TypeOptions().setDelay(125));
			
			// Click login
			page.click("input[name='login']");
			page.waitForLoadState();
			
			// Select server
			page.getByRole(
				AriaRole.LINK,
				new Page.GetByRoleOptions().setName(
					Pattern.compile(server, Pattern.CASE_INSENSITIVE)
				)
			).click();
			
			// Display JavaScript messages in console
			page.onConsoleMessage(new Consumer<ConsoleMessage>() {
				@Override
				public void accept(ConsoleMessage msg) {
					// Ignore warnings, these are only generated by the game anyway
					if (msg.type().equalsIgnoreCase("warn")) {
						return;
					}
					System.out.println("console." + msg.type() + ": " + msg.text());
				}
			});
			
			final Bool shouldExit = new Bool();
			
			// Later the injected scripts can call this (via window.requestExit();) to close the browser
			System.out.println("Injecting requestExit function into page...");
			page.exposeFunction("requestExit", new FunctionCallback() {
				@Override
				public Object call(Object... arg) {
					shouldExit.value = true;
					return null;
				}
			});
			
			// Inject scripts
			// Normally this would be done after everything else is complete
			// however, the web site this is written for overrides the Map
			// object which breaks page.evaluate(); since page.evaluate();
			// uses and depends on window.Map not being modified.
			if (args.length > 0) {
				System.out.println("Loading scripts...");
				for (int i = 0; i < script.size(); i++) {
					File tf = new File(script.get(i)).getAbsoluteFile();
					if (tf.exists() && tf.isFile()) {
						String script_src = tryGet(tf.getAbsolutePath());
						if (script_src != null) {
							System.out.println("Loading script: " + tf.getName());
							//page.evaluate(script_src);
							page.addInitScript(Paths.get(tf.getAbsolutePath()));
						} else {
							System.out.println("Couldn't load: " + tf.getAbsolutePath());
						}
					} else {
						System.out.println("File doesn't exist: " + tf.getAbsolutePath());
					}
				}
			}
			
			System.out.println("Waiting for loading to complete...");
			
			// Wait for redirect
			page.waitForURL(Pattern.compile(".+\\/game\\.php.*"));
			
			// wait for loading menu and map fade to be complete (display none)
			page.waitForSelector("div[id='ui-loader']", new WaitForSelectorOptions().setState(WaitForSelectorState.HIDDEN));
			page.waitForSelector("div[id='ui-mapfade']", new WaitForSelectorOptions().setState(WaitForSelectorState.HIDDEN));
			
			if (screenshot) {
				String desktopPath = System.getProperty("user.home") + File.separator + "Desktop" + File.separator + "screenshot.png";
				System.out.println("Saving screenshot...");
				page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get(desktopPath)));
			}
			
			if (!shouldExit.value) {
				System.out.println("Holding browser open...");
			}
			
			while (
				!shouldExit.value &&
				// This will cause the loop to end if the browser window closes
				page.content().length() > 0
			) {
				sleep(100);
			}
		} catch (com.microsoft.playwright.PlaywrightException e) {
			if (
				e.getMessage().contains("page, context or browser has been closed") ||
				e.getMessage().contains("Target closed")
			) {
				System.out.println("Browser closed.");
			} else {
				System.out.println("Unexpected PlaywrightException:");
				e.printStackTrace();
			}
		} catch (Exception e) {
			System.out.println("Unexpected Exception:");
			e.printStackTrace();
		} finally {
			try {
				page.close();
			} catch (Exception e) {}
			try {
				context.close();
			} catch (Exception e) {}
			try {
				browser.close();
			} catch (Exception e) {}
		}
	}
}
